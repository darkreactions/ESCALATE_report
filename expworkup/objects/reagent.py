import logging
import numpy as np
import pandas as pd



class ReagentObject:
    modlog = logging.getLogger('report.RegentObject')
    ''' Reagent Object containing template, model and object information

    v1 input is dataframe of the reagent information as parsed from JSON from google drive

    TODO: build reagent_object at the initial parsing of the download JSON file
    TODO: direct import of reagent_model information from Capture
    TODO: consistency checks and validation of reagent_object concentration calculations

    next generation should be closer to a json file structure of the reagent file. Ideally the reagent json itself can
    be provided to a class and then used downstream for additional manipulation
    '''

    def __init__(self,
                 reagent_df,
                 reagent_name):
        """
        initializes ReagentObjects

        TODO: generate class prior to call of concCalc
        TODO: build reagent objects at initial import from JSON structure

        Args:
            reagent_df: dataframe as generated by concCalc
            reagent_name: parsed name of the reagent (ex. '_raw_reagent_1')
        """
        self.conc_v1 = self.calc_conc_v1(reagent_df, reagent_name)


    def calc_conc_v1(self,
                     one_reagent_df,
                     reagent_name):
        """ calculate concentration of each chemical in reagent, return dataframe of chemicals and concentrations

        returns dataframe columns formatted as '_raw_reagent_1_v1-conc_InChIKey', rows are default numbered indexes

        Args:
            one_reagent_df: dataframe as generated by concCalc
            reagent_name: parsed name of the reagent (ex. '_raw_reagent_1')
        """
        conc = {}
        # calculate the total volume of the reagent solution using the volume of the chemicals as an approximation
        for index, row in one_reagent_df.iterrows():
            if row['unit'] == 'gram':
                one_reagent_df.at[index, 'chemical_volume'] = float(row['amount']) / \
                                                              float(row['density'])  # converts grams to mL
            elif row['unit'] == 'milliliter':
                one_reagent_df.at[index, 'chemical_volume'] = row['amount']  # leaves mL well enough alone
            elif row['unit'] == 'null':
                one_reagent_df.at[index, 'chemical_volume'] = 0  # null is null!
        # calculate the concentrations of each chemical using the approximated volume from above
        final_reagent_volume = one_reagent_df['chemical_volume'].astype(float).sum()
        for index, row in one_reagent_df.iterrows():
            if row['unit'] == 'gram':
                calculated_concentration = float(row['amount']) / float(row['molecularmass']) / \
                                                 float(final_reagent_volume / 1000)  # g --> mol --> [M] (v1-conc)
                name_space = (reagent_name + "_v1-conc_" + (one_reagent_df.loc[(index, 'InChiKey')]))
                conc[name_space] = calculated_concentration
            elif row['unit'] == 'milliliter':
                calculated_concentration = float(row['amount']) * float(row['density']) / \
                                            float(row['molecularmass']) / float(final_reagent_volume / 1000)
                name_space = (reagent_name + "_v1-conc_" + (one_reagent_df.loc[(index, 'InChiKey')]))
                conc[name_space] = calculated_concentration
            elif row['unit'] == 'null':
                calculated_concentration = 0  # null is null!
                name_space = (reagent_name + "_v1-conc_" + (one_reagent_df.loc[(index, 'InChiKey')]))
                conc[name_space] = calculated_concentration
        return([conc])






